// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.4

package user_like

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userLikeFieldNames          = builder.RawFieldNames(&UserLike{})
	userLikeRows                = strings.Join(userLikeFieldNames, ",")
	userLikeRowsExpectAutoSet   = strings.Join(stringx.Remove(userLikeFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	userLikeRowsWithPlaceHolder = strings.Join(stringx.Remove(userLikeFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheQqForumUserLikeIdPrefix                       = "cache:qqForum:userLike:id:"
	cacheQqForumUserLikeUserIdTargetTypeTargetIdPrefix = "cache:qqForum:userLike:userId:targetType:targetId:"
)

type (
	userLikeModel interface {
		Insert(ctx context.Context, data *UserLike) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UserLike, error)
		FindOneByUserIdTargetTypeTargetId(ctx context.Context, userId int64, targetType string, targetId int64) (*UserLike, error)
		Update(ctx context.Context, data *UserLike) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUserLikeModel struct {
		sqlc.CachedConn
		table string
	}

	UserLike struct {
		Id         int64     `db:"id"`          // auto_like_id
		UserId     int64     `db:"user_id"`     // user id
		TargetType string    `db:"target_type"` // target type
		TargetId   int64     `db:"target_id"`   // target id
		CreatedAt  time.Time `db:"created_at"`
	}
)

func newUserLikeModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultUserLikeModel {
	return &defaultUserLikeModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`user_like`",
	}
}

func (m *defaultUserLikeModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	qqForumUserLikeIdKey := fmt.Sprintf("%s%v", cacheQqForumUserLikeIdPrefix, id)
	qqForumUserLikeUserIdTargetTypeTargetIdKey := fmt.Sprintf("%s%v:%v:%v", cacheQqForumUserLikeUserIdTargetTypeTargetIdPrefix, data.UserId, data.TargetType, data.TargetId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, qqForumUserLikeIdKey, qqForumUserLikeUserIdTargetTypeTargetIdKey)
	return err
}

func (m *defaultUserLikeModel) FindOne(ctx context.Context, id int64) (*UserLike, error) {
	qqForumUserLikeIdKey := fmt.Sprintf("%s%v", cacheQqForumUserLikeIdPrefix, id)
	var resp UserLike
	err := m.QueryRowCtx(ctx, &resp, qqForumUserLikeIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userLikeRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserLikeModel) FindOneByUserIdTargetTypeTargetId(ctx context.Context, userId int64, targetType string, targetId int64) (*UserLike, error) {
	qqForumUserLikeUserIdTargetTypeTargetIdKey := fmt.Sprintf("%s%v:%v:%v", cacheQqForumUserLikeUserIdTargetTypeTargetIdPrefix, userId, targetType, targetId)
	var resp UserLike
	err := m.QueryRowIndexCtx(ctx, &resp, qqForumUserLikeUserIdTargetTypeTargetIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `user_id` = ? and `target_type` = ? and `target_id` = ? limit 1", userLikeRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, userId, targetType, targetId); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserLikeModel) Insert(ctx context.Context, data *UserLike) (sql.Result, error) {
	qqForumUserLikeIdKey := fmt.Sprintf("%s%v", cacheQqForumUserLikeIdPrefix, data.Id)
	qqForumUserLikeUserIdTargetTypeTargetIdKey := fmt.Sprintf("%s%v:%v:%v", cacheQqForumUserLikeUserIdTargetTypeTargetIdPrefix, data.UserId, data.TargetType, data.TargetId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, userLikeRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserId, data.TargetType, data.TargetId)
	}, qqForumUserLikeIdKey, qqForumUserLikeUserIdTargetTypeTargetIdKey)
	return ret, err
}

func (m *defaultUserLikeModel) Update(ctx context.Context, newData *UserLike) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	qqForumUserLikeIdKey := fmt.Sprintf("%s%v", cacheQqForumUserLikeIdPrefix, data.Id)
	qqForumUserLikeUserIdTargetTypeTargetIdKey := fmt.Sprintf("%s%v:%v:%v", cacheQqForumUserLikeUserIdTargetTypeTargetIdPrefix, data.UserId, data.TargetType, data.TargetId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userLikeRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.UserId, newData.TargetType, newData.TargetId, newData.Id)
	}, qqForumUserLikeIdKey, qqForumUserLikeUserIdTargetTypeTargetIdKey)
	return err
}

func (m *defaultUserLikeModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheQqForumUserLikeIdPrefix, primary)
}

func (m *defaultUserLikeModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userLikeRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUserLikeModel) tableName() string {
	return m.table
}
