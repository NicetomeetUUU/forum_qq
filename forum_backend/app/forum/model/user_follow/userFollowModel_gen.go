// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.4

package user_follow

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userFollowFieldNames          = builder.RawFieldNames(&UserFollow{})
	userFollowRows                = strings.Join(userFollowFieldNames, ",")
	userFollowRowsExpectAutoSet   = strings.Join(stringx.Remove(userFollowFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	userFollowRowsWithPlaceHolder = strings.Join(stringx.Remove(userFollowFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheQqForumUserFollowIdPrefix                    = "cache:qqForum:userFollow:id:"
	cacheQqForumUserFollowFollowerIdFollowingIdPrefix = "cache:qqForum:userFollow:followerId:followingId:"
)

type (
	userFollowModel interface {
		Insert(ctx context.Context, data *UserFollow) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UserFollow, error)
		FindOneByFollowerIdFollowingId(ctx context.Context, followerId int64, followingId int64) (*UserFollow, error)
		Update(ctx context.Context, data *UserFollow) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUserFollowModel struct {
		sqlc.CachedConn
		table string
	}

	UserFollow struct {
		Id          int64     `db:"id"`           // auto_follow_id
		FollowerId  int64     `db:"follower_id"`  // follower user id
		FollowingId int64     `db:"following_id"` // following user id
		CreatedAt   time.Time `db:"created_at"`
	}
)

func newUserFollowModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultUserFollowModel {
	return &defaultUserFollowModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`user_follow`",
	}
}

func (m *defaultUserFollowModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	qqForumUserFollowFollowerIdFollowingIdKey := fmt.Sprintf("%s%v:%v", cacheQqForumUserFollowFollowerIdFollowingIdPrefix, data.FollowerId, data.FollowingId)
	qqForumUserFollowIdKey := fmt.Sprintf("%s%v", cacheQqForumUserFollowIdPrefix, id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, qqForumUserFollowFollowerIdFollowingIdKey, qqForumUserFollowIdKey)
	return err
}

func (m *defaultUserFollowModel) FindOne(ctx context.Context, id int64) (*UserFollow, error) {
	qqForumUserFollowIdKey := fmt.Sprintf("%s%v", cacheQqForumUserFollowIdPrefix, id)
	var resp UserFollow
	err := m.QueryRowCtx(ctx, &resp, qqForumUserFollowIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userFollowRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserFollowModel) FindOneByFollowerIdFollowingId(ctx context.Context, followerId int64, followingId int64) (*UserFollow, error) {
	qqForumUserFollowFollowerIdFollowingIdKey := fmt.Sprintf("%s%v:%v", cacheQqForumUserFollowFollowerIdFollowingIdPrefix, followerId, followingId)
	var resp UserFollow
	err := m.QueryRowIndexCtx(ctx, &resp, qqForumUserFollowFollowerIdFollowingIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `follower_id` = ? and `following_id` = ? limit 1", userFollowRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, followerId, followingId); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserFollowModel) Insert(ctx context.Context, data *UserFollow) (sql.Result, error) {
	qqForumUserFollowFollowerIdFollowingIdKey := fmt.Sprintf("%s%v:%v", cacheQqForumUserFollowFollowerIdFollowingIdPrefix, data.FollowerId, data.FollowingId)
	qqForumUserFollowIdKey := fmt.Sprintf("%s%v", cacheQqForumUserFollowIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, userFollowRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.FollowerId, data.FollowingId)
	}, qqForumUserFollowFollowerIdFollowingIdKey, qqForumUserFollowIdKey)
	return ret, err
}

func (m *defaultUserFollowModel) Update(ctx context.Context, newData *UserFollow) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	qqForumUserFollowFollowerIdFollowingIdKey := fmt.Sprintf("%s%v:%v", cacheQqForumUserFollowFollowerIdFollowingIdPrefix, data.FollowerId, data.FollowingId)
	qqForumUserFollowIdKey := fmt.Sprintf("%s%v", cacheQqForumUserFollowIdPrefix, data.Id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userFollowRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.FollowerId, newData.FollowingId, newData.Id)
	}, qqForumUserFollowFollowerIdFollowingIdKey, qqForumUserFollowIdKey)
	return err
}

func (m *defaultUserFollowModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheQqForumUserFollowIdPrefix, primary)
}

func (m *defaultUserFollowModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userFollowRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUserFollowModel) tableName() string {
	return m.table
}
