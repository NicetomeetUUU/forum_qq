// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.4

package post

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	postFieldNames          = builder.RawFieldNames(&Post{})
	postRows                = strings.Join(postFieldNames, ",")
	postRowsExpectAutoSet   = strings.Join(stringx.Remove(postFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	postRowsWithPlaceHolder = strings.Join(stringx.Remove(postFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheQqForumPostIdPrefix = "cache:qqForum:post:id:"
)

type (
	postModel interface {
		Insert(ctx context.Context, data *Post) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Post, error)
		Update(ctx context.Context, data *Post) error
		Delete(ctx context.Context, id int64) error
	}

	defaultPostModel struct {
		sqlc.CachedConn
		table string
	}

	Post struct {
		Id           int64         `db:"id"`            // auto_post_id
		Title        string        `db:"title"`         // title
		Content      string        `db:"content"`       // content
		UserId       int64         `db:"user_id"`       // user id
		CategoryId   sql.NullInt64 `db:"category_id"`   // category id
		ViewCount    int64         `db:"view_count"`    // view count
		LikeCount    int64         `db:"like_count"`    // like count
		CommentCount int64         `db:"comment_count"` // comment count
		Status       int64         `db:"status"`        // 1: published, 0: draft, 2: deleted
		IsTop        int64         `db:"is_top"`        // 1: top, 0: normal
		IsHot        int64         `db:"is_hot"`        // 1: hot, 0: normal
		CreatedTime  time.Time     `db:"created_time"`  // created time
		UpdatedTime  time.Time     `db:"updated_time"`  // updated time
	}
)

func newPostModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultPostModel {
	return &defaultPostModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`post`",
	}
}

func (m *defaultPostModel) Delete(ctx context.Context, id int64) error {
	qqForumPostIdKey := fmt.Sprintf("%s%v", cacheQqForumPostIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, qqForumPostIdKey)
	return err
}

func (m *defaultPostModel) FindOne(ctx context.Context, id int64) (*Post, error) {
	qqForumPostIdKey := fmt.Sprintf("%s%v", cacheQqForumPostIdPrefix, id)
	var resp Post
	err := m.QueryRowCtx(ctx, &resp, qqForumPostIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", postRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPostModel) Insert(ctx context.Context, data *Post) (sql.Result, error) {
	qqForumPostIdKey := fmt.Sprintf("%s%v", cacheQqForumPostIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, postRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Title, data.Content, data.UserId, data.CategoryId, data.ViewCount, data.LikeCount, data.CommentCount, data.Status, data.IsTop, data.IsHot, data.CreatedTime, data.UpdatedTime)
	}, qqForumPostIdKey)
	return ret, err
}

func (m *defaultPostModel) Update(ctx context.Context, data *Post) error {
	qqForumPostIdKey := fmt.Sprintf("%s%v", cacheQqForumPostIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, postRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Title, data.Content, data.UserId, data.CategoryId, data.ViewCount, data.LikeCount, data.CommentCount, data.Status, data.IsTop, data.IsHot, data.CreatedTime, data.UpdatedTime, data.Id)
	}, qqForumPostIdKey)
	return err
}

func (m *defaultPostModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheQqForumPostIdPrefix, primary)
}

func (m *defaultPostModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", postRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultPostModel) tableName() string {
	return m.table
}
