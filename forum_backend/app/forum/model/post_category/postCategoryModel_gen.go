// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.4

package post_category

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	postCategoryFieldNames          = builder.RawFieldNames(&PostCategory{})
	postCategoryRows                = strings.Join(postCategoryFieldNames, ",")
	postCategoryRowsExpectAutoSet   = strings.Join(stringx.Remove(postCategoryFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	postCategoryRowsWithPlaceHolder = strings.Join(stringx.Remove(postCategoryFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheQqForumPostCategoryIdPrefix               = "cache:qqForum:postCategory:id:"
	cacheQqForumPostCategoryPostIdCategoryIdPrefix = "cache:qqForum:postCategory:postId:categoryId:"
)

type (
	postCategoryModel interface {
		Insert(ctx context.Context, data *PostCategory) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*PostCategory, error)
		FindOneByPostIdCategoryId(ctx context.Context, postId int64, categoryId int64) (*PostCategory, error)
		Update(ctx context.Context, data *PostCategory) error
		Delete(ctx context.Context, id int64) error
	}

	defaultPostCategoryModel struct {
		sqlc.CachedConn
		table string
	}

	PostCategory struct {
		Id          int64     `db:"id"`           // auto_post_category_id
		PostId      int64     `db:"post_id"`      // post id
		CategoryId  int64     `db:"category_id"`  // category id
		CreatedTime time.Time `db:"created_time"` // created time
	}
)

func newPostCategoryModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultPostCategoryModel {
	return &defaultPostCategoryModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`post_category`",
	}
}

func (m *defaultPostCategoryModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	qqForumPostCategoryIdKey := fmt.Sprintf("%s%v", cacheQqForumPostCategoryIdPrefix, id)
	qqForumPostCategoryPostIdCategoryIdKey := fmt.Sprintf("%s%v:%v", cacheQqForumPostCategoryPostIdCategoryIdPrefix, data.PostId, data.CategoryId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, qqForumPostCategoryIdKey, qqForumPostCategoryPostIdCategoryIdKey)
	return err
}

func (m *defaultPostCategoryModel) FindOne(ctx context.Context, id int64) (*PostCategory, error) {
	qqForumPostCategoryIdKey := fmt.Sprintf("%s%v", cacheQqForumPostCategoryIdPrefix, id)
	var resp PostCategory
	err := m.QueryRowCtx(ctx, &resp, qqForumPostCategoryIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", postCategoryRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPostCategoryModel) FindOneByPostIdCategoryId(ctx context.Context, postId int64, categoryId int64) (*PostCategory, error) {
	qqForumPostCategoryPostIdCategoryIdKey := fmt.Sprintf("%s%v:%v", cacheQqForumPostCategoryPostIdCategoryIdPrefix, postId, categoryId)
	var resp PostCategory
	err := m.QueryRowIndexCtx(ctx, &resp, qqForumPostCategoryPostIdCategoryIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `post_id` = ? and `category_id` = ? limit 1", postCategoryRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, postId, categoryId); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPostCategoryModel) Insert(ctx context.Context, data *PostCategory) (sql.Result, error) {
	qqForumPostCategoryIdKey := fmt.Sprintf("%s%v", cacheQqForumPostCategoryIdPrefix, data.Id)
	qqForumPostCategoryPostIdCategoryIdKey := fmt.Sprintf("%s%v:%v", cacheQqForumPostCategoryPostIdCategoryIdPrefix, data.PostId, data.CategoryId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, postCategoryRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.PostId, data.CategoryId, data.CreatedTime)
	}, qqForumPostCategoryIdKey, qqForumPostCategoryPostIdCategoryIdKey)
	return ret, err
}

func (m *defaultPostCategoryModel) Update(ctx context.Context, newData *PostCategory) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	qqForumPostCategoryIdKey := fmt.Sprintf("%s%v", cacheQqForumPostCategoryIdPrefix, data.Id)
	qqForumPostCategoryPostIdCategoryIdKey := fmt.Sprintf("%s%v:%v", cacheQqForumPostCategoryPostIdCategoryIdPrefix, data.PostId, data.CategoryId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, postCategoryRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.PostId, newData.CategoryId, newData.CreatedTime, newData.Id)
	}, qqForumPostCategoryIdKey, qqForumPostCategoryPostIdCategoryIdKey)
	return err
}

func (m *defaultPostCategoryModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheQqForumPostCategoryIdPrefix, primary)
}

func (m *defaultPostCategoryModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", postCategoryRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultPostCategoryModel) tableName() string {
	return m.table
}
