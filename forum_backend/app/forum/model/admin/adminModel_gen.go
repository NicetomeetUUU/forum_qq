// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.4

package admin

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	adminFieldNames          = builder.RawFieldNames(&Admin{})
	adminRows                = strings.Join(adminFieldNames, ",")
	adminRowsExpectAutoSet   = strings.Join(stringx.Remove(adminFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	adminRowsWithPlaceHolder = strings.Join(stringx.Remove(adminFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheQqForumAdminIdPrefix       = "cache:qqForum:admin:id:"
	cacheQqForumAdminEmailPrefix    = "cache:qqForum:admin:email:"
	cacheQqForumAdminPhonePrefix    = "cache:qqForum:admin:phone:"
	cacheQqForumAdminUsernamePrefix = "cache:qqForum:admin:username:"
)

type (
	adminModel interface {
		Insert(ctx context.Context, data *Admin) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Admin, error)
		FindOneByEmail(ctx context.Context, email string) (*Admin, error)
		FindOneByPhone(ctx context.Context, phone string) (*Admin, error)
		FindOneByUsername(ctx context.Context, username string) (*Admin, error)
		Update(ctx context.Context, data *Admin) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAdminModel struct {
		sqlc.CachedConn
		table string
	}

	Admin struct {
		Id          int64     `db:"id"`         // auto_admin_id
		Email       string    `db:"email"`      // email
		Password    string    `db:"password"`   // password
		Username    string    `db:"username"`   // username
		Phone       string    `db:"phone"`      // phone
		Status      int64     `db:"status"`     // 1: active, 0: inactive
		IsDeleted   int64     `db:"is_deleted"` // 1: deleted, 0: not deleted
		CreatedTime time.Time `db:"created_time"`
		UpdatedTime time.Time `db:"updated_time"`
	}
)

func newAdminModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultAdminModel {
	return &defaultAdminModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`admin`",
	}
}

func (m *defaultAdminModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	qqForumAdminEmailKey := fmt.Sprintf("%s%v", cacheQqForumAdminEmailPrefix, data.Email)
	qqForumAdminIdKey := fmt.Sprintf("%s%v", cacheQqForumAdminIdPrefix, id)
	qqForumAdminPhoneKey := fmt.Sprintf("%s%v", cacheQqForumAdminPhonePrefix, data.Phone)
	qqForumAdminUsernameKey := fmt.Sprintf("%s%v", cacheQqForumAdminUsernamePrefix, data.Username)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, qqForumAdminEmailKey, qqForumAdminIdKey, qqForumAdminPhoneKey, qqForumAdminUsernameKey)
	return err
}

func (m *defaultAdminModel) FindOne(ctx context.Context, id int64) (*Admin, error) {
	qqForumAdminIdKey := fmt.Sprintf("%s%v", cacheQqForumAdminIdPrefix, id)
	var resp Admin
	err := m.QueryRowCtx(ctx, &resp, qqForumAdminIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", adminRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAdminModel) FindOneByEmail(ctx context.Context, email string) (*Admin, error) {
	qqForumAdminEmailKey := fmt.Sprintf("%s%v", cacheQqForumAdminEmailPrefix, email)
	var resp Admin
	err := m.QueryRowIndexCtx(ctx, &resp, qqForumAdminEmailKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `email` = ? limit 1", adminRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, email); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAdminModel) FindOneByPhone(ctx context.Context, phone string) (*Admin, error) {
	qqForumAdminPhoneKey := fmt.Sprintf("%s%v", cacheQqForumAdminPhonePrefix, phone)
	var resp Admin
	err := m.QueryRowIndexCtx(ctx, &resp, qqForumAdminPhoneKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `phone` = ? limit 1", adminRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, phone); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAdminModel) FindOneByUsername(ctx context.Context, username string) (*Admin, error) {
	qqForumAdminUsernameKey := fmt.Sprintf("%s%v", cacheQqForumAdminUsernamePrefix, username)
	var resp Admin
	err := m.QueryRowIndexCtx(ctx, &resp, qqForumAdminUsernameKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `username` = ? limit 1", adminRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, username); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAdminModel) Insert(ctx context.Context, data *Admin) (sql.Result, error) {
	qqForumAdminEmailKey := fmt.Sprintf("%s%v", cacheQqForumAdminEmailPrefix, data.Email)
	qqForumAdminIdKey := fmt.Sprintf("%s%v", cacheQqForumAdminIdPrefix, data.Id)
	qqForumAdminPhoneKey := fmt.Sprintf("%s%v", cacheQqForumAdminPhonePrefix, data.Phone)
	qqForumAdminUsernameKey := fmt.Sprintf("%s%v", cacheQqForumAdminUsernamePrefix, data.Username)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, adminRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Email, data.Password, data.Username, data.Phone, data.Status, data.IsDeleted, data.CreatedTime, data.UpdatedTime)
	}, qqForumAdminEmailKey, qqForumAdminIdKey, qqForumAdminPhoneKey, qqForumAdminUsernameKey)
	return ret, err
}

func (m *defaultAdminModel) Update(ctx context.Context, newData *Admin) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	qqForumAdminEmailKey := fmt.Sprintf("%s%v", cacheQqForumAdminEmailPrefix, data.Email)
	qqForumAdminIdKey := fmt.Sprintf("%s%v", cacheQqForumAdminIdPrefix, data.Id)
	qqForumAdminPhoneKey := fmt.Sprintf("%s%v", cacheQqForumAdminPhonePrefix, data.Phone)
	qqForumAdminUsernameKey := fmt.Sprintf("%s%v", cacheQqForumAdminUsernamePrefix, data.Username)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, adminRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Email, newData.Password, newData.Username, newData.Phone, newData.Status, newData.IsDeleted, newData.CreatedTime, newData.UpdatedTime, newData.Id)
	}, qqForumAdminEmailKey, qqForumAdminIdKey, qqForumAdminPhoneKey, qqForumAdminUsernameKey)
	return err
}

func (m *defaultAdminModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheQqForumAdminIdPrefix, primary)
}

func (m *defaultAdminModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", adminRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAdminModel) tableName() string {
	return m.table
}
